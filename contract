// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BUSD_T {
    // Основные данные токена
    string public name = "BUSD-T Stablecoin";
    string public symbol = "BSC-USD";
    uint8 public decimals = 18; // Используется стандартное количество десятичных разрядов
    uint256 public totalSupply;

    // Маппинги для хранения балансов и разрешений
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    // Адрес владельца контракта
    address public owner;

    // События для отслеживания транзакций
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Ограничение только для владельца
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    // Конструктор контракта
    constructor(uint256 _initialSupply) {
        owner = msg.sender; // Устанавливаем владельца контракта
        totalSupply = _initialSupply * (10 ** uint256(decimals)); // Устанавливаем общую эмиссию токенов
        balanceOf[msg.sender] = totalSupply; // Отправляем все токены владельцу
        emit Transfer(address(0), msg.sender, totalSupply); // Генерируем событие Transfer
    }

    // Функция перевода токенов
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    // Функция одобрения токенов для использования третьими лицами
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    // Функция перевода токенов третьим лицом
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Allowance exceeded");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    // Функция выпуска новых токенов (mint), доступна только владельцу
    function mint(address _to, uint256 _amount) public onlyOwner {
        uint256 amountWithDecimals = _amount * (10 ** uint256(decimals));
        totalSupply += amountWithDecimals;
        balanceOf[_to] += amountWithDecimals;
        emit Transfer(address(0), _to, amountWithDecimals);
    }

    // Функция сжигания токенов, доступна только владельцу
    function burn(uint256 _amount) public onlyOwner {
        uint256 amountWithDecimals = _amount * (10 ** uint256(decimals));
        require(balanceOf[msg.sender] >= amountWithDecimals, "Insufficient balance to burn");
        totalSupply -= amountWithDecimals;
        balanceOf[msg.sender] -= amountWithDecimals;
        emit Transfer(msg.sender, address(0), amountWithDecimals);
    }
}
